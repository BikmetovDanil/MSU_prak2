SENTENCE -> FUNC_DEF | OPERATOR
FUNC_DEF -> function <ident> ([<ident>], {,<ident>}) BLOCK
OPERATOR -> VAR_DEF | BLOCK | COND_OP | LOOP_OP | TRANSIT_OP | EXPR_OP | ;
VAR_DEF -> var <ident> [= EXPRESSION] {, <ident> [= EXPRESSION]} ;
BLOCK -> { OPERATOR {OPERATOR} }
COND_OP -> if (EXPRESSION) OPERATOR  [else OPERATOR]
LOOP_OP -> while(EXPRESSION) OPERATOR | for([EXPRESSION]; [EXPRESSION]; [EXPRESSION]) OPERATOR |
	   do OPERATOR while(EXPRESSION); | for([var] <ident> in EXPRESSION) OPERATOR
TRANSIT_OP -> break; | continue; | return [EXPRESSION];
EXPR_OP -> EXPRESSION ;
